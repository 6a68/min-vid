#!/usr/bin/env node
/*
 * This Source Code is subject to the terms of the Mozilla Public License
 * version 2.0 (the 'License'). You can obtain a copy of the License at
 * http://mozilla.org/MPL/2.0/.
 */
/*
 * This script is for signing the Min Vid add-on. If the current
 * package version has already been signed, we download the signed xpi
 * from amo, and move the files into the dist/ directory.
 * If the package version has not been signed, sign the xpi, and move
 * them into the /dist directory.
 *
 */

/* eslint-disable no-console */

const fs = require('fs');
const request = require('request');
const jwt = require('jsonwebtoken');
const manifest = require('../package.json');
const version = manifest.version;
const apiKey = process.env['AMO_USER'];
const apiSecret = process.env['AMO_SECRET'];
const authToken = jwt.sign({iss: apiKey}, apiSecret, {
  algorithm: 'HS256',
  expiresIn: 60
});
const signedOpts = {
  url: 'https://addons.mozilla.org/api/v3/addons/@' + manifest.name + '/versions/' + version + '/',
  headers: {
    'Authorization': 'JWT ' + authToken
  }
};

request(signedOpts, signCb);

function signCb(err, resp, body) {
  if (!err && resp.statusCode === 200) {
    const info = JSON.parse(body);
    if (info.files.length) {
      const ws = fs.createWriteStream('dist/signed-addon.xpi').on('finish', removeGeneratedXpi);
      signedOpts.url = info.files[0].download_url;
      request(signedOpts).pipe(ws);
    }
  } else distAddon();
}

// if we need to sign and distribute our add-on, we want to use this method
function distAddon() {
  // sign our add-on
  const generatedXpi = 'dist/addon.xpi';
  signAddon(generatedXpi, function(err, signedXpiPath) {
    if (err) return console.error(err);
    // remove our generated xpi since we now have a signed version
    removeGeneratedXpi();
    // move our signed xpi and rdf into the /dist dir
    // directory and exit
    checkExistsAndMv(signedXpiPath, 'dist/signed-addon.xpi', function(err) {
      if (err) return console.error(err);
      console.log('addon.xpi written to dist/signed-addon.xpi');
    });
  });
}

function removeGeneratedXpi() {
  const generatedXpi = 'dist/addon.xpi';
  fs.unlink(generatedXpi, function(err) {
    if (err) console.error(err);
    else console.log('removed ' + generatedXpi + ' successfully');
  });
}

function signAddon(xpiPath, cb) {
  require('jpm/lib/sign').sign({
    apiKey: apiKey,
    apiSecret: apiSecret,
    xpi: xpiPath
  }).then(function(result) {
    if (result.success) cb(null, result.downloadedFiles[0]);
    else cb(result);
  }).catch(cb);
}

function checkExistsAndMv(fromFilePath, toFilePath, cb) {
  fs.stat(fromFilePath, function(err) {
    if (err) return cb(err);
    fs.rename(fromFilePath, toFilePath, function(err) {
      if (err) return cb(err);
      else cb();
    });
  });
}
